Search Keys:            
             
             PHP PDO Connection,
             Users Table Schema, 
             PHP Mysql PDO DELETE,         
             PHP PDO MYSQL Fetch ONLY On Column (One Field), 
             PHP PDO MYSQL UPDATE Request, 
             PHP PDO MYSQL Create(insert Users),             
             Hashing Passwords, 
             



--------------------------------------------------------------------------------------------------

In PHP, to list the contents of a directory, you can use the scandir() function or glob() function. Here's how you can do it:


//Using scandir():

$path = '/path/to/directory';
$files = scandir($path);

foreach ($files as $file) {
    echo $file . "<br>";
}


//Using glob():

$path = '/path/to/directory/*';
$files = glob($path);

foreach ($files as $file) {
    echo $file . "<br>";
}
-----------------------------------------------------------

//You can find the current directory path

$path = $_SERVER['DOCUMENT_ROOT'];
echo $path;

//Include a file relative to the root directory
$path = $_SERVER['DOCUMENT_ROOT'] . '/your/directory/path';
echo $path;

------------------------------------------------------------


--> Hashing Passwords:

*password_hash(): 

// Plain text password
$password = 'user_password';

// Hash the password
$hashedPassword = password_hash($password, PASSWORD_DEFAULT);

// Store $hashedPassword in your database
echo "Hashed Password: $hashedPassword";


*password_verify():

// Password entered by the user
$userInputPassword = 'user_password';

// Hashed password retrieved from the database
$hashedPasswordFromDB = '$2y$10$8PrfY4yW.Mz4qXawG3u/HOxTT16ZSKXm9DfnCtHxblNp3LUzpmW7m';

// Verify the password
if (password_verify($userInputPassword, $hashedPasswordFromDB)) {
    echo "Password is correct!";
} else {
    echo "Password is incorrect!";
}

---------------------------------------------------------------

>> Users Table Schema: 

    CREATE TABLE IF NOT EXISTS users (
        id INT AUTO_INCREMENT PRIMARY KEY,
        username VARCHAR(50) NOT NULL,
        email VARCHAR(100) NOT NULL,
        password VARCHAR(255) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    )";


    INSERT INTO users (username, email, password) VALUES
    ('user1', 'user1@example.com', 'password1'),
    ('user2', 'user2@example.com', 'password2'),
    ('user3', 'user3@example.com', 'password3'),
    ('user4', 'user4@example.com', 'password4'),
    ('user5', 'user5@example.com', 'password5'),
    ('user6', 'user6@example.com', 'password6'),
    ('user7', 'user7@example.com', 'password7'),
    ('user8', 'user8@example.com', 'password8'),
    ('user9', 'user9@example.com', 'password9'),
    ('user10', 'user10@example.com', 'password10');

---------------------------------------------------------------

>> PHP PDO MYSQL Fetch ONLY On Column (One Field): 

<?php
// Database connection parameters
$host = 'localhost';
$dbname = 'github';
$username = 'root';
$password = '';

try {
    // Connect to the database
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
    
    // Set PDO to throw exceptions on error
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    // Prepare SQL query
    $stmt = $pdo->prepare("SELECT * FROM users");

    // Execute the query
    $stmt->execute();

    // Fetch dates
    $dates = $stmt->fetchAll(PDO::FETCH_COLUMN);


    // Output dates
    foreach ($dates as $date) {
        echo $date . "<br>"; 
    }
} catch (PDOException $e) {
    // Handle errors
    echo "Error: " . $e->getMessage();
}

?>


---------------------------------------------------------------


---------------------------------------------------------------


PHP PDO Connection: Fetch All 


<?php
// Database connection settings
$host = 'localhost';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

try {
    // Establish database connection using PDO
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

    // Set PDO to throw exceptions on errors
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    // Prepare SQL statement
    $statement = $pdo->prepare("SELECT * FROM your_table");

    // Execute the query
    $statement->execute();

    // Fetch all rows as an associative array
    $results = $statement->fetchAll(PDO::FETCH_ASSOC);

    // Output the fetched data
    foreach ($results as $row) {
        echo "ID: " . $row['id'] . ", Name: " . $row['name'] . "<br>";
        // Adjust the keys according to your table structure
    }
} catch (PDOException $e) {
    // Handle database connection errors
    echo "Error: " . $e->getMessage();
}

// Close the connection
$pdo = null;
?>




----------------------------------------------------------------


PHP Mysql PDO DELETE: 

<?php
// Database connection settings
$host = 'localhost';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

try {
    // Establish database connection using PDO
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

    // Set PDO to throw exceptions on errors
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    // Define the ID of the record you want to delete
    $idToDelete = 1; // Change this to the ID you want to delete

    // Prepare the DELETE statement
    $deleteStatement = $pdo->prepare("DELETE FROM users WHERE id = :id");

    // Bind the ID parameter
    $deleteStatement->bindParam(':id', $idToDelete, PDO::PARAM_INT);

    // Execute the DELETE statement
    $deleteStatement->execute();

    // Check if any rows were affected
    $rowCount = $deleteStatement->rowCount();
    if ($rowCount > 0) {
        echo "Record deleted successfully.";
    } else {
        echo "No records found to delete.";
    }
} catch (PDOException $e) {
    // Handle database connection errors
    echo "Error: " . $e->getMessage();
}

// Close the connection
$pdo = null;
?>


-----------------------------------------------------------------------

>>  delete record in php:

<?php
// Check if the request method is DELETE
if ($_SERVER['REQUEST_METHOD'] === 'DELETE') {
    // Get the ID of the record to delete from the request body
    $requestData = json_decode(file_get_contents('php://input'), true);
    $idToDelete = isset($requestData['id']) ? $requestData['id'] : null;

    // Validate the ID (you should perform more thorough validation in a real application)
    if ($idToDelete !== null && is_numeric($idToDelete)) {
        // Connect to your database and execute the DELETE query using PDO
        $host = 'localhost';
        $dbname = 'your_database_name';
        $username = 'your_username';
        $password = 'your_password';

        try {
            // Establish database connection using PDO
            $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

            // Set PDO to throw exceptions on errors
            $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

            // Prepare the DELETE statement
            $deleteStatement = $pdo->prepare("DELETE FROM users WHERE id = :id");

            // Bind the ID parameter
            $deleteStatement->bindParam(':id', $idToDelete, PDO::PARAM_INT);

            // Execute the DELETE statement
            $deleteStatement->execute();

            // Check if any rows were affected
            $rowCount = $deleteStatement->rowCount();
            if ($rowCount > 0) {
                http_response_code(200); // OK
                echo json_encode(array("message" => "Record deleted successfully."));
            } else {
                http_response_code(404); // Not Found
                echo json_encode(array("message" => "No records found to delete."));
            }
        } catch (PDOException $e) {
            // Handle database connection errors
            http_response_code(500); // Internal Server Error
            echo json_encode(array("message" => "Database error: " . $e->getMessage()));
        }

        // Close the connection
        $pdo = null;
    } else {
        // ID not provided or invalid
        http_response_code(400); // Bad Request
        echo json_encode(array("message" => "Invalid or missing ID parameter."));
    }
} else {
    // Method not allowed
    http_response_code(405); // Method Not Allowed
    echo json_encode(array("message" => "Method not allowed."));
}
?>

-----------------------------------------------------------------------
------------------------------------------------------------------------


>>> PHP PDO MYSQL Create(insert Users) 

<?php
// Database connection parameters
$host = 'localhost';
$dbname = 'your_database';
$username = 'your_username';
$password = 'your_password';

try {
    // Connect to the database
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
    
    // Set PDO to throw exceptions on error
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    // Prepare SQL insert statement
    $stmt = $pdo->prepare("INSERT INTO your_table (column1, column2) VALUES (:value1, :value2)");

    // Bind parameters
    $stmt->bindParam(':value1', $value1);
    $stmt->bindParam(':value2', $value2);

    // Set the values of parameters
    $value1 = 'value_for_column1';
    $value2 = 'value_for_column2';

    // Execute the statement
    $stmt->execute();

    echo "Data inserted successfully!";
} catch (PDOException $e) {
    // Handle errors
    echo "Error: " . $e->getMessage();
}

?>

-------------------------------------------------------------------------

-------------------------------------------------------------------------


  // Check if data is sent via POST request and if the data is not null

<?php
// Database connection parameters
$host = 'localhost';
$dbname = 'your_database';
$username = 'your_username';
$password = 'your_password';

try {
    // Connect to the database
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    // Check if data is sent via POST request and if the data is not null
    if ($_SERVER['REQUEST_METHOD'] === 'POST' && !empty($_POST)) {
        // Retrieve data from POST request
        $data = json_decode(file_get_contents("php://input"), true);

        // Check if the required keys exist in the data array
        if (isset($data['id'], $data['value1'], $data['value2'])) {
            // Prepare SQL update statement
            $stmt = $pdo->prepare("UPDATE your_table SET column1 = :value1, column2 = :value2 WHERE id = :id");

            // Bind parameters
            $stmt->bindParam(':value1', $data['value1']);
            $stmt->bindParam(':value2', $data['value2']);
            $stmt->bindParam(':id', $data['id']);

            // Execute the statement
            $stmt->execute();

            echo "Data updated successfully!";
        } else {
            echo "Invalid data received!";
        }
    } else {
        echo "Invalid request method or empty data!";
    }
} catch (PDOException $e) {
    // Handle errors
    echo "Error: " . $e->getMessage();
}
?>


----------------------------------------------------------------------------

----> Working <----

Jquery: 


$(function(){

//1. Delete User: Sending Ajax Request to endpoint

    const deleteUserId = $('.delete')
    const deleteUrl = 'http://localhost/api/delete.php'

    deleteUserId.on('click', function(){
          deleteUser(this.id)
    }) 
     
     function deleteUser(id){
         const deleteId = id   
        $.ajax({
          url: deleteUrl,
          type: "POST", 
          data: {       
          id:deleteId,      
          },
          cache:false,
          success: function(response) {
            // Handle successful response
            //console.log("hi");            
            $('.alert').html(response)
            $(".alert").css('display','block')
            //removeAlert();
          }
        })  
      }


//2. Update Request to end point

  const updateUserId = $('.update')
  const updateUrl = 'http://localhost/api/update.php'

    updateUserId.on('click', function(e){
        updateUsers(this.id);
    })

    function updateUsers(id){
        // Get form data
        const username = $('#username').val()
        const email    = $('#email').val();
        const password = $('#password').val()
        const updateId       = id
        const formData = {id:updateId,username:username,email:email,password:password}
         //var formData = $('#registerForm').serialize();


        $.ajax({
          url: updateUrl,
          type: "POST", // or "POST", "PUT", etc. depending on your needs
        data: formData,
        //cache:false,
          success: function(response) {
            // handle successful response from the server
            console.log(response);
              // Handle successful response
              //console.log("hi");            
              $('.alert').html(response)
              $(".alert").css('display','block')
              //removeAlert();        
          },
          error: function(xhr, status, error) {
            // handle errors
            console.error(xhr.responseText)
          }
        });
    }



//3. View User: Sending Ajax Request 

    const viewUserId = $('.view');
    const userViewUrl = 'http://localhost/api/view.php';

    viewUserId.on('click', function(){
          userView(this.id)
    }) 
     
     function userView(id){
         const viewId = id
        
        $.ajax({
          url: userViewUrl,
          type: "POST", 
          data: {id: viewId},
          cache:false,
          success: function(response) {
          var txt = ""
          const data = JSON.parse(response)
          $.each(data,function(i,v){
               txt += '<tr><td>' + v.id + '</td>' + 
                           '<td>' + v.username + '</td>' +
                           '<td>' + v.email + '</td>' +
               '</tr>'
          })
             $('#userView').html(txt)

            // Handle successful response
            //console.log("hi");            
            //$('.alert').html(response)
            //$(".alert").css('display','block')
            //removeAlert();          
          }
        })  
      }




//4. Update User: Sending Ajax Request endpoint


  $('#createUser').on('click', function(){
        createUsers();
  })

  function createUsers(){
        //console.log(deleteUser.attr('data-id'))
        const createUrl = "http://localhost/api/create.php"
        // Get form data
        const username = $('#username').val();
        const email = $('#email').val();
        const password = $('#password').val();
        //const formData = {username:username,email:email,password:password}
         var formData = $('#registerForm').serialize();
    $.ajax({
      url: createUrl,
      type: "POST", // or "POST", "PUT", etc. depending on your needs
      data: formData,
      success: function(response) {
        // handle successful response from the server
        console.log(response);
        $('.alert').css('display','block');
        $('.alert').html(response);
      },
      error: function(xhr, status, error) {
        // handle errors
        console.error(xhr.responseText);
      }
    });
  }

  //End of ready function
  })

</script>

----------------------------------------------------------------------------
