Search Keys:            
             
             PHP PDO Connection,
             Users Table Schema, 
             PHP Mysql PDO DELETE,         
             PHP PDO MYSQL Fetch ONLY On Column (One Field), 
             PHP PDO MYSQL UPDATE Request, 
             PHP PDO MYSQL Create(insert Users),             
             Hashing Passwords, 
             



--------------------------------------------------------------------------------------------------

In PHP, to list the contents of a directory, you can use the scandir() function or glob() function. Here's how you can do it:


//Using scandir():

$path = '/path/to/directory';
$files = scandir($path);

foreach ($files as $file) {
    echo $file . "<br>";
}


//Using glob():

$path = '/path/to/directory/*';
$files = glob($path);

foreach ($files as $file) {
    echo $file . "<br>";
}
-----------------------------------------------------------

//You can find the current directory path

$path = $_SERVER['DOCUMENT_ROOT'];
echo $path;

//Include a file relative to the root directory
$path = $_SERVER['DOCUMENT_ROOT'] . '/your/directory/path';
echo $path;

------------------------------------------------------------


--> Hashing Passwords:

*password_hash(): 

// Plain text password
$password = 'user_password';

// Hash the password
$hashedPassword = password_hash($password, PASSWORD_DEFAULT);

// Store $hashedPassword in your database
echo "Hashed Password: $hashedPassword";


*password_verify():

// Password entered by the user
$userInputPassword = 'user_password';

// Hashed password retrieved from the database
$hashedPasswordFromDB = '$2y$10$8PrfY4yW.Mz4qXawG3u/HOxTT16ZSKXm9DfnCtHxblNp3LUzpmW7m';

// Verify the password
if (password_verify($userInputPassword, $hashedPasswordFromDB)) {
    echo "Password is correct!";
} else {
    echo "Password is incorrect!";
}

---------------------------------------------------------------

>> Users Table Schema: 

    CREATE TABLE IF NOT EXISTS users (
        id INT AUTO_INCREMENT PRIMARY KEY,
        username VARCHAR(50) NOT NULL,
        email VARCHAR(100) NOT NULL,
        password VARCHAR(255) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    )";


    INSERT INTO users (username, email, password) VALUES
    ('user1', 'user1@example.com', 'password1'),
    ('user2', 'user2@example.com', 'password2'),
    ('user3', 'user3@example.com', 'password3'),
    ('user4', 'user4@example.com', 'password4'),
    ('user5', 'user5@example.com', 'password5'),
    ('user6', 'user6@example.com', 'password6'),
    ('user7', 'user7@example.com', 'password7'),
    ('user8', 'user8@example.com', 'password8'),
    ('user9', 'user9@example.com', 'password9'),
    ('user10', 'user10@example.com', 'password10');

---------------------------------------------------------------

>> PHP PDO MYSQL Fetch ONLY On Column (One Field): 

<?php
// Database connection parameters
$host = 'localhost';
$dbname = 'github';
$username = 'root';
$password = '';

try {
    // Connect to the database
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
    
    // Set PDO to throw exceptions on error
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    // Prepare SQL query
    $stmt = $pdo->prepare("SELECT * FROM users");

    // Execute the query
    $stmt->execute();

    // Fetch dates
    $dates = $stmt->fetchAll(PDO::FETCH_COLUMN);


    // Output dates
    foreach ($dates as $date) {
        echo $date . "<br>"; 
    }
} catch (PDOException $e) {
    // Handle errors
    echo "Error: " . $e->getMessage();
}

?>


---------------------------------------------------------------

---------------------------------------------------------------


PHP PDO Connection: Fetch All 


<?php
// Database connection settings
$host = 'localhost';
$dbname = 'your_database_name';
$username = 'your_username';
$password = 'your_password';

try {
    // Establish database connection using PDO
    $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

    // Set PDO to throw exceptions on errors
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

    // Prepare SQL statement
    $statement = $pdo->prepare("SELECT * FROM your_table");

    // Execute the query
    $statement->execute();

    // Fetch all rows as an associative array
    $results = $statement->fetchAll(PDO::FETCH_ASSOC);

    // Output the fetched data
    foreach ($results as $row) {
        echo "ID: " . $row['id'] . ", Name: " . $row['name'] . "<br>";
        // Adjust the keys according to your table structure
    }
} catch (PDOException $e) {
    // Handle database connection errors
    echo "Error: " . $e->getMessage();
}

// Close the connection
$pdo = null;
?>




----------------------------------------------------------------


//1. Fetch API

function fetchAll(){
    // Database connection parameters
    $host = 'localhost';
    $dbname = 'github';
    $username = 'root';
    $password = '';

    try {
        // Connect to the database
        $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
        
        // Set PDO to throw exceptions on error
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

        // Prepare SQL query
        $stmt = $pdo->prepare("SELECT * FROM users");

        // Execute the query
        $stmt->execute();

        // Fetch dates
        $users = $stmt->fetchAll(PDO::FETCH_ASSOC);

        return $users;       

        // Output dates
        //foreach ($users as $user) {
            //echo json_encode($user);        
        //}
    } catch (PDOException $e) {
        // Handle errors
        echo "Error: " . $e->getMessage();
    }
}

----------------------------------------------------------------


<?php

//2. View API
if($_SERVER['REQUEST_METHOD'] === 'POST'){

    $id = $_POST['id']?? '';

    //Calling fetchAll() function  
    $userView = fetchById($id);
    echo json_encode($userView);
}

function fetchById($id){

    // Database connection parameters
    $host = 'localhost';
    $dbname = 'github';
    $username = 'root';
    $password = '';

    try {
        // Connect to the database
        $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
        
        // Set PDO to throw exceptions on error
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        // Define the ID of the record you want to delete
        $idToView =  $id; //$data['id']; // Change this to the ID you want to delete

        // Prepare SQL query
        $Viewstmt = $pdo->prepare("SELECT * FROM users where id = :id");
        // Bind the ID parameter
        $Viewstmt->bindParam(':id', $idToView, PDO::PARAM_INT);
        // Execute the query
        $Viewstmt->execute();

        // Fetch dates
        $user = $Viewstmt->fetchAll(PDO::FETCH_ASSOC);

        return $user;       
        // Output dates
        //foreach ($users as $user) {
            //echo json_encode($user);        
        //}
    } catch (PDOException $e) {
        // Handle errors
        echo "Error: " . $e->getMessage();
    }
}


-----------------------------------------------------------------------
-----------------------------------------------------------------------

 PHP Mysql PDO DELETE: 

>>  delete record in php:

<?php

// 3. Delete Api

if ($_SERVER['REQUEST_METHOD'] === 'POST') {

    $deleteId = $_POST['id']?? '';   
    
    //Calling deleteUser function
    deleteUser($deleteId);
}

function deleteUser($deleteId){

    // Database connection settings
    $host = 'localhost';
    $dbname = 'github';
    $username = 'root';
    $password = '';

    try {
        // Establish database connection using PDO
        $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);

        // Set PDO to throw exceptions on errors
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

        //$data = json_decode(file_get_contents("php://input"), true);

        // Define the ID of the record you want to delete
        $idToDelete =  $deleteId; //$data['id']; // Change this to the ID you want to delete

        // Prepare the DELETE statement
        $deleteStatement = $pdo->prepare("DELETE FROM users WHERE id = :id");

        // Bind the ID parameter
        $deleteStatement->bindParam(':id', $idToDelete, PDO::PARAM_INT);

        // Execute the DELETE statement
        $deleteStatement->execute();

        // Check if any rows were affected
        $rowCount = $deleteStatement->rowCount();
        if ($rowCount > 0) {
            echo "Record deleted successfully.";
        } else {
            echo "No records found to delete.";
        }
    } catch (PDOException $e) {
        // Handle database connection errors
        echo "Error: " . $e->getMessage();
    }

}

-----------------------------------------------------------------------
------------------------------------------------------------------------


>>> PHP PDO MYSQL Create(insert Users) 

<?php

// 4. Create API

if($_SERVER['REQUEST_METHOD'] === 'POST'){

    //$data = json_decode(file_get_contents("php://input"), true);   
    // Set the values of parameters
     
    $createUserName =  $_POST['username']?? '';  //data['username']; 
    $createUserEmail =  $_POST['email']?? '';        //data['email'];                                
    $createUserPass = password_hash($_POST['password']?? '', PASSWORD_DEFAULT);
    
    //Calling createUser function
    createUser($createUserName,$createUserEmail,$createUserPass);
}

function createUser($createUserName,$createUserEmail,$createUserPass){

    // Database connection parameters
    $host = 'localhost';
    $dbname = 'github';
    $username = 'root';
    $password = '';

    try {
        // Connect to the database
        $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
        
        // Set PDO to throw exceptions on error
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

        // Prepare SQL insert statement
        $stmt = $pdo->prepare("INSERT INTO users (username, email, password) VALUES (:username, :email , :password)");

        // Bind parameters
        $stmt->bindParam(':username', $username);
        $stmt->bindParam(':email', $email);
        $stmt->bindParam(':password', $password);

        // Set the values of parameters
        $username = $createUserName;
        $email = $createUserEmail;
        $password = password_hash($createUserPass, PASSWORD_DEFAULT);

        // Execute the statement
        $stmt->execute();

        echo "Data inserted successfully!";
    } catch (PDOException $e) {
        // Handle errors
        echo "Error: " . $e->getMessage();
    }
}

?>

-------------------------------------------------------------------------

-------------------------------------------------------------------------


// Check if data is sent via POST request and if the data is not null

<?php

//5. Update Api

if($_SERVER['REQUEST_METHOD'] === 'POST'){

    //$data = json_decode(file_get_contents("php://input"), true);   
    // Set the values of parameters
    $updateId = $_POST['id']?? '';                //$data['id']; 
    $updateUsername =  $_POST['username']?? '';  //data['username']; 
    $updateEmail =  $_POST['email']?? '';        //data['email'];                                
    $updatePssword = password_hash($_POST['password']?? '', PASSWORD_DEFAULT);
    
    //Calling updateUser function
    updateUser($updateId,$updateUsername,$updateEmail,$updatePssword);
}


function updateUser($updateId,$updateUsername,$updateEmail,$updatePssword){

   // Database connection parameters
    $host = 'localhost';
    $dbname = 'github';
    $username = 'root';
    $password = '';

    try {
        // Connect to the database
        $pdo = new PDO("mysql:host=$host;dbname=$dbname", $username, $password);
        
        // Set PDO to throw exceptions on error
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);



        // Prepare SQL query
        $stmt = $pdo->prepare("UPDATE users SET username = :username, email = :email, password = :password WHERE id = :id");

        // Bind parameters
        $stmt->bindParam(':id', $updateId, PDO::PARAM_INT);
        $stmt->bindParam(':username', $updateUsername, PDO::PARAM_STR);
        $stmt->bindParam(':email', $updateEmail, PDO::PARAM_STR);
        $stmt->bindParam(':password', $updatePssword, PDO::PARAM_STR);        

        // Execute the query
        $stmt->execute();

        // Check if any rows were affected
        $rowCount = $stmt->rowCount();        
        if ($rowCount > 0) {
            echo "Update successful. $rowCount row(s) updated.";
        } else {
            echo "No rows updated.";
        }
    } catch (PDOException $e) {
        // Handle errors
        echo "Error: " . $e->getMessage();
    }
}
?>

----------------------------------------------------------------------------

----> Working <----

Jquery: 


$(function(){

//1. Delete User: Sending Ajax Request to endpoint

    const deleteUserId = $('.delete')
    const deleteUrl = 'http://localhost/api/delete.php'

    deleteUserId.on('click', function(){
          deleteUser(this.id)
    }) 
     
     function deleteUser(id){
         const deleteId = id   
        $.ajax({
          url: deleteUrl,
          type: "POST", 
          data: {       
          id:deleteId,      
          },
          cache:false,
          success: function(response) {
            // Handle successful response
            //console.log("hi");            
            $('.alert').html(response)
            $(".alert").css('display','block')
            //removeAlert();
          }
        })  
      }


//2. Update Request to end point

  const updateUserId = $('.update')
  const updateUrl = 'http://localhost/api/update.php'

    updateUserId.on('click', function(e){
        updateUsers(this.id);
    })

    function updateUsers(id){
        // Get form data
        const username = $('#username').val()
        const email    = $('#email').val();
        const password = $('#password').val()
        const updateId       = id
        const formData = {id:updateId,username:username,email:email,password:password}
         //var formData = $('#registerForm').serialize();


        $.ajax({
          url: updateUrl,
          type: "POST", // or "POST", "PUT", etc. depending on your needs
        data: formData,
        //cache:false,
          success: function(response) {
            // handle successful response from the server
            console.log(response);
              // Handle successful response
              //console.log("hi");            
              $('.alert').html(response)
              $(".alert").css('display','block')
              //removeAlert();        
          },
          error: function(xhr, status, error) {
            // handle errors
            console.error(xhr.responseText)
          }
        });
    }



//3. View User: Sending Ajax Request 

    const viewUserId = $('.view');
    const userViewUrl = 'http://localhost/api/view.php';

    viewUserId.on('click', function(){
          userView(this.id)
    }) 
     
     function userView(id){
         const viewId = id
        
        $.ajax({
          url: userViewUrl,
          type: "POST", 
          data: {id: viewId},
          cache:false,
          success: function(response) {
          var txt = ""
          const data = JSON.parse(response)
          $.each(data,function(i,v){
               txt += '<tr><td>' + v.id + '</td>' + 
                           '<td>' + v.username + '</td>' +
                           '<td>' + v.email + '</td>' +
               '</tr>'
          })
             $('#userView').html(txt)

            // Handle successful response
            //console.log("hi");            
            //$('.alert').html(response)
            //$(".alert").css('display','block')
            //removeAlert();          
          }
        })  
      }




//4. Update User: Sending Ajax Request endpoint


  $('#createUser').on('click', function(){
        createUsers();
  })

  function createUsers(){
        //console.log(deleteUser.attr('data-id'))
        const createUrl = "http://localhost/api/create.php"
        // Get form data
        const username = $('#username').val();
        const email = $('#email').val();
        const password = $('#password').val();
        //const formData = {username:username,email:email,password:password}
         var formData = $('#registerForm').serialize();
    $.ajax({
      url: createUrl,
      type: "POST", // or "POST", "PUT", etc. depending on your needs
      data: formData,
      success: function(response) {
        // handle successful response from the server
        console.log(response);
        $('.alert').css('display','block');
        $('.alert').html(response);
      },
      error: function(xhr, status, error) {
        // handle errors
        console.error(xhr.responseText);
      }
    });
  }

  //End of ready function
  })

</script>

----------------------------------------------------------------------------
